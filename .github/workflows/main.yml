name: CI
on:
  push:
    branches:
      - "master"

env:
  DOCKER_REGISTRY_PATH: kit

jobs:
  build_api:
    defaults:
      run:
        shell: bash
        working-directory: apps/api
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: '19.5.0'
      - uses: pnpm/action-setup@v2
        with:
          version: 8.1.0
      - uses: ./.github/actions/utils-before
      - run: pnpm install
      - run: pnpm build
      - run: pnpm -F "." deploy .release
      - name: Zip artifact for deployment
        run: zip -q release.zip ./.release ./lib -r
      - uses: actions/upload-artifact@master
        with:
          name: api
          path: apps/api/release.zip
    
  docker_api:
    needs: build_api
    defaults:
      run:
        shell: bash
        working-directory: apps/api
    runs-on: ubuntu-22.04
    container: lskjs/dind
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@master
        with:
          name: api
          path: apps/api
      - name: unzip artifact for deployment
        run: unzip -q release.zip && rm release.zip
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_PASS }}
      -
        name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: apps/api
          push: true
          tags: "${{ vars.DOCKER_REGISTRY }}/${DOCKER_REGISTRY_PATH}/api:${GITHUB_SHA::7}"
      # - uses: ./.github/actions/docker
      #   with:
      #     working-directory: apps/api
      #     user: ${{ secrets.DOCKER_REGISTRY_USER }}
      #     pass: ${{ secrets.DOCKER_REGISTRY_PASS }}
      #     registry: ${{ vars.DOCKER_REGISTRY }}

  # build_web:
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: '20.2.0'
  #     - uses: pnpm/action-setup@v2
  #       with:
  #         version: 8.1.0
  #     - run: pnpm install
  #     - run: pnpm build
  #     - run: pnpm -F "." deploy .release