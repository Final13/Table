name: "Prepare docker utils before deploy"
description: "Prepare docker utils before deploy"

runs:
  using: "composite"
  steps:
    - run: |
        log() { echo "$*" ; "$@" ; }
        exists() { if [ -z "${!1}" ]; then echo "$1 is empty" && exit 1; fi }
        if [ -x "$(command -v pnpm)" ]; then pnpm config set store-dir .pnpm-store; fi
        if [ "$CWD" ]; then echo "Change directory: $CWD" && cd $CWD; fi
        if [ -z "$CI_COMMIT_REF_NAME" ]; then export CI_COMMIT_REF_NAME="${GITHUB_REF#refs/heads/}"; fi
        if [ -z "$CI_COMMIT_SHORT_SHA" ]; then export CI_COMMIT_SHORT_SHA="$(git rev-parse --short "$GITHUB_SHA")"; fi
        if [ -z "$STAGE" ]; then export STAGE="${CI_ENVIRONMENT_NAME}"; fi
        if [ -z "$VERSION" ]; then export VERSION="${CI_COMMIT_SHORT_SHA}"; fi
        if [ -z "$PACKAGE_PATH" ]; then export PACKAGE_PATH="."; fi
        if [ -z "$DOCKER_REGISTRY_USER" ]; then export DOCKER_REGISTRY_USER="${CI_REGISTRY_USER}"; fi
        if [ -z "$DOCKER_REGISTRY_PASS" ]; then export DOCKER_REGISTRY_PASS="${CI_REGISTRY_PASSWORD}"; fi
        if [ -z "$DOCKER_REGISTRY" ]; then export DOCKER_REGISTRY="${CI_REGISTRY}"; fi
        if [ -z "$DOCKER_REGISTRY_PATH" ]; then export DOCKER_REGISTRY_PATH="${CI_PROJECT_PATH}"; fi
        if [ -z "$DOCKER_REGISTRY_URI" ]; then exists DOCKER_REGISTRY && export DOCKER_REGISTRY_URI="${DOCKER_REGISTRY}/${DOCKER_REGISTRY_PATH}"; fi
        if [ -z "$DOCKER_IMAGE" ]; then export DOCKER_IMAGE="${DOCKER_REGISTRY_URI}:${CI_COMMIT_SHORT_SHA}"; fi
        if [ -z "$DOCKER_TAG" ]; then export DOCKER_TAG=$(echo "${CI_COMMIT_REF_NAME}" | rev | cut -d'/' -f 1 | rev); fi
        if [ -z "$DOCKER_IMAGE_VERSION" ]; then export DOCKER_IMAGE_VERSION="${CI_COMMIT_SHORT_SHA}"; fi
        if [ -z "$DOCKER_IMAGE_TAG" ]; then export DOCKER_IMAGE_TAG="${DOCKER_REGISTRY_URI}:${DOCKER_TAG}"; fi
        if [ -z "$DOCKER_SERVICE" ]; then export DOCKER_SERVICE="${CI_PROJECT_PATH_SLUG}"; fi
        if [ -z "$DOCKER_FILE" ]; then exists PACKAGE_PATH && export DOCKER_FILE="${PACKAGE_PATH}"; fi
        if [ -z "$DOCKER_STACK" ]; then export DOCKER_STACK="docker-stack.yml"; fi
        if [ -z "$env_js" ]; then export env_js="/REPLACE_ME_PLEASE_OR_CHECK_PROTECTED_BRANCH_IN_CI/env_js"; fi
        if [ -z "$dev_env_js" ]; then export dev_env_js="/REPLACE_ME_PLEASE_OR_CHECK_PROTECTED_BRANCH_IN_CI/dev_env_js"; fi
        if [ -z "$prod_env_js" ]; then export prod_env_js="/REPLACE_ME_PLEASE_OR_CHECK_PROTECTED_BRANCH_IN_CI/prod_env_js"; fi
        if [ -z "$env_file" ]; then export env_file="/REPLACE_ME_PLEASE_OR_CHECK_PROTECTED_BRANCH_IN_CI/env_file"; fi
        if [ -z "$dev_env_file" ]; then export dev_env_file="/REPLACE_ME_PLEASE_OR_CHECK_PROTECTED_BRANCH_IN_CI/dev_env_file"; fi
        if [ -z "$prod_env_file" ]; then export prod_env_file="/REPLACE_ME_PLEASE_OR_CHECK_PROTECTED_BRANCH_IN_CI/prod_env_file"; fi
      shell: bash
    - run: |
        echo "CI_ENVIRONMENT_NAME = $CI_ENVIRONMENT_NAME"
        echo "CI_ENVIRONMENT_SLUG = $CI_ENVIRONMENT_SLUG"
        echo "CI_COMMIT_REF_NAME = $CI_COMMIT_REF_NAME"
        echo "STAGE = $STAGE"
        echo "VERSION = $VERSION"
        echo "PACKAGE_PATH = $PACKAGE_PATH"
        echo "DOCKER_REGISTRY_USER = $DOCKER_REGISTRY_USER"
        echo "DOCKER_REGISTRY_PASS = $DOCKER_REGISTRY_PASS"
        echo "DOCKER_REGISTRY = $DOCKER_REGISTRY"
        echo "DOCKER_REGISTRY_PATH = $DOCKER_REGISTRY_PATH"
        echo "DOCKER_REGISTRY_URI = $DOCKER_REGISTRY_URI"
        echo "DOCKER_IMAGE = $DOCKER_IMAGE"
        echo "DOCKER_TAG = $DOCKER_TAG"
        echo "DOCKER_IMAGE_VERSION = $DOCKER_IMAGE_VERSION"
        echo "DOCKER_IMAGE_TAG = $DOCKER_IMAGE_TAG"
        echo "DOCKER_SERVICE = $DOCKER_SERVICE"
        echo "DOCKER_FILE = $DOCKER_FILE"
        echo "DOCKER_STACK = $DOCKER_STACK"
        echo "DOCKER_IMAGE_CHECK = $DOCKER_IMAGE_CHECK"
        echo "DOCKER_STACK_DEBUG = $DOCKER_STACK_DEBUG"
        echo "env_js = $env_js"
        echo "dev_env_js = $dev_env_js"
        echo "prod_env_js = $prod_env_js"
        echo "env_file = $env_file"
        echo "dev_env_file = $dev_env_file"
        echo "prod_env_file = $prod_env_file"
        echo ""
      shell: bash
